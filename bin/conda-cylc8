#!/usr/bin/env bash

# shellcheck disable=SC1090
# shellcheck disable=SC1091
. "${HOME}/mambaforge/etc/profile.d/conda.sh"

if [[ $# -eq 0 || $# -gt 2 ]]; then
    echo 'usage: c8 ENV_NAME PY_VERSION'
    echo
    echo 'c8: (re)create a conda environment for developing cylc.'
    exit
fi

set -eu


NAME="$1"
PY_VERSION="${2:-3.7}"

CONDA=(
    python="$PY_VERSION"
    nodejs
    configurable-http-proxy
    graphviz
    pygraphviz
    yarn
)

# cylc-xtriggers
PIP_REPOS=(
    isodatetime
    rose
    cylc-flow
    cylc-sphinx-extensions
    cylc-doc
    jupyter_server
    cylc-uiserver
    cylc-rose
)

PIP=(
    black
    pipdeptree
    remote_pdb
    memory-profiler
)

get_env_file () {
    TMPFILE="$(mktemp).yml"
    sed '/\w*#.*/d' "$HOME/cylc-flow/conda-environment.yml" > "$TMPFILE"
    for output in "${CONDA[@]}"; do
        echo "  - $output" >> "$TMPFILE"
    done
    echo "  - pip" >> "$TMPFILE"
    echo "  - pip:" >> "$TMPFILE"
    for repo in "${PIP_REPOS[@]}"; do
        if ! [[ $repo == jupyter_server ]]; then
            # NOTE: jupyter_server installation is dodge, retrofit it
            echo "    - -e ${HOME}/${repo}[all]" >> "$TMPFILE"
        fi
    done
    for package in "${PIP[@]}"; do
        echo "    - ${package}" >> "$TMPFILE"
    done
    echo "$TMPFILE"
}

check_env () {
    for env in $(conda env list | awk '{ print $1 }'); do
        if [[ $NAME == "$env" ]]; then
            echo "env $NAME exists replace (y/n)?"
            read -r response
            case $response in
                [yY])
                    conda env remove -n "$NAME"
                    ;;
                [nN])
                    exit 1
                    ;;
                *)
                    echo 'invalid response' >&2
                    exit 1
                    ;;
            esac
        fi
    done
}

check_env
env_file="$(get_env_file)"
if ! mamba env create -n "$NAME" -f "$env_file"; then
    cat "$env_file" >&2
fi
